@page "/libraryItems"

@using DAL
@using LibraryServer.Models
@using Microsoft.Extensions.Configuration
@using System.Linq 
@using Blazored.SessionStorage
@inject IDataAccess data
@inject IConfiguration config
@inject ISessionStorageService session


<h3>Library Items</h3>

@if (libraryItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Sort by</p>
    <select @onchange="OnSelect" class="form-control" style="width:170px">
        @foreach (var option in options)
        {
            <option selected="@isPicked(option.Value)" value=@option.Value>@option.Name</option>
        }
    </select>
    <br />

    <div>
        <table class="table">
            <thead>
                <tr>
                    <th>Category Name</th>
                    <th>Borrower</th>
                    <th>Borrowed Date</th>
                    <th>Title</th>
                    <th>Type</th>
                    <th>Action</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var libraryitem in libraryItems)
                {
                    string[] title = @libraryitem.Title.Split(" ");
                    string acronym = "";
                    foreach(string word in title)
                    {
                        acronym += word.Substring(0,1).ToUpper();
                    }

                <tr>
                    <td>@libraryitem.CategoryName</td>
                    <td>@libraryitem.Borrower</td>
                    @if (@libraryitem.BorrowDate != null)
                    {
                        <td>@libraryitem.BorrowDate.Split(" ")[0]</td>
                    }
                    else
                    {
                        <td>@libraryitem.BorrowDate</td>
                    }
                    <td>@libraryitem.Title (@acronym)</td>
                    <td>@libraryitem.Type</td>
                    <td><a class="btn btn-primary" href='/editLibraryItem/@libraryitem.Id/@libraryitem.Type'>Edit Item</a></td>
                    <td><a class="btn btn-warning" @onclick="() => deleteItem(libraryitem.Id)">Delete Item</a></td>
                </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {

    private class OptionSelector
    {
        public string Value { get; set; }
        public string Name { get; set; }
    }

    public class SessionSelector
    {
        public string Value { get; set; }
    }

    List<LibraryItemModel> libraryItems;

    List<OptionSelector> options = new List<OptionSelector>()
    {
        new OptionSelector { Value = "c.CategoryName", Name = "Category Name"},
        new OptionSelector { Value = "l.Type", Name = "Type" }
    };

    OptionSelector selectedValue;
    public SessionSelector sessionSelector;

    protected override async Task OnInitializedAsync()
    {
        var sessionSelector = new SessionSelector();
        sessionSelector = await session.GetItemAsync<SessionSelector>("session");
        selectedValue = sessionSelector?.Value != null ? this.options.FirstOrDefault(x => x.Name == sessionSelector.Value) : options[0];

        string sql = InitSql(selectedValue.Value);
        libraryItems = await data.LoadData<LibraryItemModel, dynamic>(sql, new { }, config.GetConnectionString("DefaultConnection"));
    }

    protected async Task deleteItem(int id)
    {
        string sql = "delete from libraryitem where Id = @id";

        await data.StoreData(sql, new { Id = id }, config.GetConnectionString("DefaultConnection"));

        await OnInitializedAsync();
    }

    protected async Task OnSelect(ChangeEventArgs e)
    {
        var sessionSelector = new SessionSelector();
        this.selectedValue = this.options.SingleOrDefault(x => x.Value == e.Value.ToString());

        sessionSelector.Value = selectedValue.Name;
        await session.SetItemAsync("session", sessionSelector);

        string selector = e.Value.ToString();
        var sql = InitSql(selector);

        libraryItems = await data.LoadData<LibraryItemModel, dynamic>(sql, new { }, config.GetConnectionString("DefaultConnection"));
    }

    private string InitSql(string selector)
    {
        return "select l.Id, l.Borrower, l.BorrowDate, l.Title, l.Type, c.CategoryName " +
                        " from libraryitem as l " +
                        " left join category as c " +
                        " on l.CategoryId = c.Id " +
                        $" order by {selector} ";
    }

    private bool isPicked(string selector) 
    {
        return selector == selectedValue.Value;
    }
}

